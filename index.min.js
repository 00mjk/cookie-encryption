"use strict";

function MAIN(my) {
    this._my = my, this.cookie = my.cookie, this.encoding = my.encoding, this.decrypt = null, 
    this.encrypt = null, this._cipher = null, this.cache = {
        read: new Object(null),
        write: new Object(null)
    };
}

function SIGNED(my) {
    MAIN.call(this, my), this.customization(!0);
}

function NORMAL(my) {
    MAIN.call(this, my), this.customization(!1);
}

function cookiee(secret, opt) {
    if (!secret) throw new TypeError("secret required");
    var options = opt || Object.create(null), my = {
        secret: Buffer.isBuffer(secret) ? secret : new Buffer(secret),
        cipher: String(options.cipher || "arc4"),
        cookie: String(options.cookie || "vault"),
        domain: String(options.domain || ""),
        path: String(options.path || "/"),
        age: Number(options.age) || 31536e6,
        httpOnly: Boolean(options.httpOnly),
        secure: Boolean(options.secure),
        signed: Boolean(options.signed),
        encoding: String(options.encoding || "hex"),
        extra: Array.isArray(options.extra) === !0 ? options.extra : []
    };
    return Boolean(options.signed) ? new SIGNED(my) : new NORMAL(my);
}

try {
    var arc4 = null, autokey = null, crypto = require("crypto"), getCipher = new Array([ "arc4", "rc4a", "vmpc", "rc4+" ], crypto.getCiphers(), crypto.getHashes(), [ "modp1", "modp2", "modp5", "modp14", "modp15", "modp16", "modp17", "modp18" ], [ "pbkdf2" ], [ "autokey" ]), inherits = require("util").inherits;
} catch (MODULE_NOT_FOUND) {
    console.error(MODULE_NOT_FOUND), process.exit(1);
}

inherits(SIGNED, MAIN), inherits(NORMAL, MAIN), MAIN.prototype.flush = function() {
    this.cache = {
        read: new Object(null),
        write: new Object(null)
    };
}, MAIN.prototype.customization = function(signed) {
    var my = this._my;
    if (my.cipher === getCipher[4][0]) this.encrypt = function(data, encoding) {
        return crypto.pbkdf2Sync(my.cipher, my.extra[0], my.extra[1], my.extra[2]).toString(encoding || this.encoding);
    }, this.decrypt = function() {
        throw new TypeError("Pbkdf2 not supported");
    }; else if (my.cipher === getCipher[5][0]) null === autokey && (autokey = require("autokey")), 
    this._cipher = autokey(my.secret), this.encrypt = function(data, encoding) {
        if ("string" == typeof data) return this._cipher.encodeString(data, "utf8", encoding || this.encoding);
        if (Buffer.isBuffer(data)) return this._cipher.encodeBuffer(data).toString(encoding || this.encoding);
        throw new TypeError("Not a string or buffer");
    }, this.decrypt = function(data, encoding) {
        if ("string" == typeof data) return this._cipher.decodeString(data, encoding || this.encoding);
        throw new TypeError("Not a string or buffer");
    }; else if (getCipher[0].indexOf(my.cipher) >= 0) null === arc4 && (arc4 = require("arc4")), 
    this._cipher = arc4(my.cipher, my.secret), this.encrypt = function(data, encoding) {
        if ("string" == typeof data) return this._cipher.encodeString(data, "utf8", encoding || this.encoding);
        if (Buffer.isBuffer(data)) return this._cipher.encodeBuffer(data).toString(encoding || this.encoding);
        throw new TypeError("Not a string or buffer");
    }, this.decrypt = function(data, encoding) {
        if ("string" == typeof data) return this._cipher.decodeString(data, encoding || this.encoding);
        throw new TypeError("Not a string or buffer");
    }; else if (getCipher[1].indexOf(my.cipher) >= 0) this.encrypt = function(data, encoding) {
        var cipher = crypto.createCipher(my.cipher, my.secret);
        return cipher.update(data) + cipher["final"](encoding || this.encoding);
    }, this.decrypt = function(data, encoding) {
        var cipher = crypto.createDecipher(my.cipher, my.secret);
        return cipher.update(data, encoding || this.encoding) + cipher["final"]();
    }; else if (getCipher[2].indexOf(my.cipher) >= 0) void 0 === my.extra[0] ? (this.encrypt = function(data, encoding) {
        var cipher = crypto.createHash(my.cipher);
        return cipher.update(data).digest(encoding || this.encoding);
    }, this.decrypt = function() {
        throw new TypeError("Hash not supported");
    }) : (this.encrypt = function(data, encoding) {
        var cipher = crypto.createHmac(my.cipher, my.secret);
        return cipher.update(data).digest(encoding || this.encoding);
    }, this.decrypt = function() {
        throw new TypeError("Hmac not supported");
    }); else {
        if (!(getCipher[3].indexOf(my.cipher) >= 0)) throw new TypeError("Cipher not supported");
        this.encrypt = function(data, encoding) {
            var cipher = crypto.getDiffieHellman(my.cipher);
            return cipher.generateKeys().toString(encoding || this.encoding);
        }, this.decrypt = function() {
            throw new TypeError("DiffieHellman not supported");
        };
    }
    this.set = function(res, data, cookie) {
        var my = this._my;
        return res.cookie(cookie || this.cookie, data, {
            domain: my.domain,
            path: my.path,
            maxAge: my.age,
            httpOnly: my.httpOnly,
            secure: my.secure,
            signed: signed
        }), data;
    };
}, SIGNED.prototype.read = function(req, cookie, encoding) {
    var ck, o;
    return void 0 === req.signedCookies || void 0 === (ck = req.signedCookies[cookie || this.cookie]) ? "" : (void 0 === (o = this.cache.read[ck]) && (o = this.cache.read[ck] = this.decrypt(ck, encoding)), 
    o);
}, NORMAL.prototype.read = function(req, cookie, encoding) {
    var ck, o;
    return void 0 === req.cookies || void 0 === (ck = req.cookies[cookie || this.cookie]) ? "" : (void 0 === (o = this.cache.read[ck]) && (o = this.cache.read[ck] = this.decrypt(ck, encoding)), 
    o);
}, SIGNED.prototype.write = function(req, data, cookie, encoding) {
    var o, ck = cookie || this.cookie;
    return void 0 === (o = this.cache.write[data]) && (o = this.cache.write[data] = this.encrypt(data, encoding)), 
    req.signedCookies[ck] !== o && (req.signedCookies[ck] = this.set(req.res, o, cookie)), 
    o;
}, NORMAL.prototype.write = function(req, data, cookie, encoding) {
    var o, ck = cookie || this.cookie;
    return void 0 === (o = this.cache.write[data]) && (o = this.cache.write[data] = this.encrypt(data, encoding)), 
    req.cookies[ck] !== o && (req.cookies[ck] = this.set(req.res, o, cookie)), o;
}, module.exports = cookiee, module.exports.getCiphers = function() {
    return getCipher;
};
